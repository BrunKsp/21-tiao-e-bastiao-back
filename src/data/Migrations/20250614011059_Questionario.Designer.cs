// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using data.Infra.PG.Context;

#nullable disable

namespace data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250614011059_Questionario")]
    partial class Questionario
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("code_race")
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("data.Infra.PG.Entities.AlternativasEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CriadoEm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("criado_em")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Letra")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("letra");

                    b.Property<Guid>("QuestaoId")
                        .HasColumnType("uuid");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("slug");

                    b.Property<string>("Texto")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("texto");

                    b.HasKey("Id");

                    b.HasIndex("QuestaoId");

                    b.HasIndex("Slug");

                    b.ToTable("alternativa", "code_race");
                });

            modelBuilder.Entity("data.Infra.PG.Entities.QuestoesEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("AlternativaCorreta")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("alternativa_correta");

                    b.Property<DateTime>("CriadoEm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("criado_em")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Enunciado")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("enunciado");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("slug");

                    b.Property<string>("Tema")
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Slug");

                    b.ToTable("questao", "code_race");
                });

            modelBuilder.Entity("data.Infra.PG.Entities.RespostaAlunoEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<bool>("Acertou")
                        .HasColumnType("boolean")
                        .HasColumnName("acertou");

                    b.Property<DateTime>("CriadoEm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("criado_em")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("LetraEscolhida")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("letra_escolhida");

                    b.Property<Guid>("QuestaoId")
                        .HasColumnType("uuid")
                        .HasColumnName("questao_id");

                    b.Property<DateTime>("RespondidoEm")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("respondido_em");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("slug");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uuid")
                        .HasColumnName("usuario_id");

                    b.HasKey("Id");

                    b.HasIndex("QuestaoId");

                    b.HasIndex("Slug");

                    b.ToTable("resposta_aluno", "code_race");
                });

            modelBuilder.Entity("data.Infra.PG.Entities.UsuarioEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CriadoEm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("criado_em")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nome");

                    b.Property<string>("Senha")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("senha");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("slug");

                    b.Property<short>("TipoUsuario")
                        .HasColumnType("smallint")
                        .HasColumnName("tipo_usuario");

                    b.HasKey("Id");

                    b.HasIndex("Slug");

                    b.ToTable("usuario", "code_race");
                });

            modelBuilder.Entity("data.Infra.PG.Entities.AlternativasEntity", b =>
                {
                    b.HasOne("data.Infra.PG.Entities.QuestoesEntity", "Questao")
                        .WithMany("Alternativas")
                        .HasForeignKey("QuestaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Questao");
                });

            modelBuilder.Entity("data.Infra.PG.Entities.RespostaAlunoEntity", b =>
                {
                    b.HasOne("data.Infra.PG.Entities.QuestoesEntity", "Questao")
                        .WithMany()
                        .HasForeignKey("QuestaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Questao");
                });

            modelBuilder.Entity("data.Infra.PG.Entities.QuestoesEntity", b =>
                {
                    b.Navigation("Alternativas");
                });
#pragma warning restore 612, 618
        }
    }
}
